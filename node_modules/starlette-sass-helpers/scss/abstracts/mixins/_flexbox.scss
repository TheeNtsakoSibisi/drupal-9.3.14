// @include flexbox;
@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
	display: flex;
}


// @include inline-flex;
@mixin inline-flex {
	display: -webkit-inline-box;
	display: -moz-inline-box;
	display: -webkit-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

/**
 * How to use:
 * @include flex-direction(column);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
 * 
 * Options:
 * --- row
 * --- row-reverse
 * --- column
 * --- column-reverse
 */
@mixin flex-direction( $value: row ) {
	@if $value == row-reverse {
	  	-webkit-box-direction: reverse;
	  	-webkit-box-orient: horizontal;
	  	-moz-box-direction: reverse;
	  	-moz-box-orient: horizontal;
	} @else if $value == column {
	  	-webkit-box-direction: normal;
	  	-webkit-box-orient: vertical;
	  	-moz-box-direction: normal;
	  	-moz-box-orient: vertical;
	} @else if $value == column-reverse {
	  	-webkit-box-direction: reverse;
	  	-webkit-box-orient: vertical;
	  	-moz-box-direction: reverse;
	  	-moz-box-orient: vertical;
	} @else {
	  	-webkit-box-direction: normal;
	  	-webkit-box-orient: horizontal;
	  	-moz-box-direction: normal;
	  	-moz-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

/**
 * How to use:
 * @include flex-column;
 */
@mixin flex-column {
	@include flex-direction( column );
}

/**
 * How to use:
 * @include flex-wrap(nowrap);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
 * 
 * Options:
 * --- nowrap
 * --- wrap
 * --- wrap-reverse
 */
@mixin flex-wrap( $value: nowrap ) {
	-webkit-flex-wrap: $value;
	@if $value == nowrap {
	  	-ms-flex-wrap: none;
	} @else {
	  	-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

/**
 * How to use:
 * @include flex-flow(row wrap);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow
 * 
 * Options:
 * --- row wrap
 * --- row-reverse nowrap
 * --- column wrap-reverse
 * --- column wrap
 */
@mixin flex-flow( $values: (row wrap) ) {
	-webkit-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

/**
 * How to use:
 * @include order(1);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/order
 */
@mixin order( $int: 0 ) {
	-webkit-box-ordinal-group: $int + 1;
	-moz-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

/**
 * How to use:
 * @include flex-grow(1);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
 */
@mixin flex-grow( $int: 1 ) {
	-webkit-box-flex: $int;
	-moz-box-flex: $int;
	-webkit-flex-grow: $int;
	-ms-flex: $int;
	flex-grow: $int;
}

/**
 * How to use:
 * @include flex-shrink(1);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
 */
@mixin flex-shrink( $int: 0 ) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex: $int;
	flex-shrink: $int;
}

/**
 * How to use:
 * @include flex-basis(auto);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
 * 
 * Options:
 * --- auto
 * --- 0 (example: any integer amount)
 * --- 200px (example: any size amount)
 */
@mixin flex-basis( $value: auto ) {
	-webkit-flex-basis: $value;
	flex-basis: $value;
}

/**
 * How to use:
 * @include flex(1 1 100px);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/flex
 */
@mixin flex( $fg: 1, $fs: 0, $fb: auto ) {
	$fg-boxflex: $fg;
	@if type-of($fg) == 'list' {
	 	$fg-boxflex: nth($fg, 1);
	}
	-webkit-box: $fg-boxflex;
	-moz-box: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

/**
 * How to use:
 * @include justify-content(flex-start);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
 * 
 * Options:
 * --- flex-start
 * --- flex-end
 * --- center
 * --- space-between
 * --- space-around
 * --- space-evenly
 */
@mixin justify-content( $value: flex-start ) {
	@if $value == flex-start {
	  	-webkit-box-pack: start;
	  	-moz-box-pack: start;
	  	-ms-flex-pack: start;
	} @else if $value == flex-end {
	  	-webkit-box-pack: end;
	  	-moz-box-pack: end;
	  	-ms-flex-pack: end;
	} @else if $value == space-between {
	  	-webkit-box-pack: justify;
	  	-moz-box-pack: justify;
	  	-ms-flex-pack: justify;
	} @else if $value == space-around {
	  	-ms-flex-pack: distribute;
	} @else {
	  	-webkit-box-pack: $value;
	  	-moz-box-pack: $value;
	  	-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	justify-content: $value;
}

/**
 * How to use:
 * @include justify-content-between;
 */
@mixin justify-content-between {
    @include justify-content( space-between );
}

/**
 * How to use:
 * @include align-items(flex-start);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
 * 
 * Options:
 * --- flex-start
 * --- flex-end
 * --- center
 */
@mixin align-items( $value: stretch ) {
	@if $value == flex-start {
	  	-webkit-box-align: start;
	  	-moz-box-align: start;
	  	-ms-flex-align: start;
	} @else if $value == flex-end {
	  	-webkit-box-align: end;
	  	-moz-box-align: end;
	  	-ms-flex-align: end;
	} @else {
	  	-webkit-box-align: $value;
	  	-moz-box-align: $value;
	  	-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	align-items: $value;
}

/**
 * How to use:
 * @include align-items-start;
 */
@mixin align-items-start {
	@include align-items( flex-start );
}

/**
 * How to use:
 * @include align-items-end;
 */
@mixin align-items-end {
	@include align-items( flex-end );
}

/**
 * How to use:
 * @include align-self(auto);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/align-self
 * 
 * Options:
 * --- auto
 * --- normal
 * --- flex-start
 * --- flex-end
 * --- center
 */
@mixin align-self( $value: auto ) {
	-webkit-align-self: $value;
	@if $value == flex-start {
	  	-ms-flex-item-align: start;
	} @else if $value == flex-end {
	  	-ms-flex-item-align: end;
	} @else {
	  	-ms-flex-item-align: $value;
	}
	align-self: $value;
}

/**
 * How to use:
 * @include align-content(flex-start);
 * 
 * Find out more:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
 * 
 * Options:
 * --- flex-start
 * --- flex-end
 * --- center
 * --- space-between
 * --- space-around
 * --- space-evenly
 */
@mixin align-content( $value: stretch ) {
	-webkit-align-content: $value;
	@if $value == flex-start {
	  	-ms-flex-line-pack: start;
	} @else if $value == flex-end {
	  	-ms-flex-line-pack: end;
	} @else {
	 	-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

/**
 * How to use:
 * @include align-content-start;
 */
@mixin align-content-start {
    @include align-content( flex-start );
}

/**
 * How to use:
 * @include align-content-end;
 */
@mixin align-content-end {
    @include align-content( flex-end );
}