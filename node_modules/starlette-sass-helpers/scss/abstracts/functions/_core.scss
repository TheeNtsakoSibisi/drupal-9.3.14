/**
 * Gets the next value in an array based on selected value
 *
 * @param mixed $current-value
 * @param map $map-array
 *
 * @return mixed
 */
@function map-next-value( $current-value, $map-array ) {

    // get current key from list
	$map-array-keys: map-keys( $map-array );
	$current-value-index: index( $map-array-keys, $current-value );

	// find index of current value and add 1
	$next-value-index: $current-value-index + 1;

	// get value from list with new index
	$next-value-key: nth( $map-array-keys, $next-value-index );
	$next-value: map-get( $map-array, $next-value-key );

	// Return value
	@return $next-value;
}

@function map-reverse($map) {
  $result: null;

  @if type-of($map) == "map" {
    $keys: map-keys($map);
    $map-reversed: ();

    @for $i from length($keys) through 1 {
      $map-reversed: map-merge(
        $map-reversed,
        (nth($keys, $i): map-get($map, nth($keys, $i)))
      );
    }

    @if type-of($map-reversed) == "map" {
      $result: $map-reversed;
    } @else {
      @warn 'There was an error reversing the order of "#{$map}"';
    }
  } @else {
    @warn '"#{$map}" is not a valid map';
  }

  @return $result;
}
